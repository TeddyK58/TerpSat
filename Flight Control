

#include <SoftwarelogFile.h>  
#include <Wire.h>
#include <SSC.h>
#include "Adafruit_MCP9808.h"
#include "Balloonduino_lib.h"
#include <Adafruit_BNO055.h>
#include <Adafruit_Sensor.h>
#include <utility/imumaths.h>
#include <Adafruit_GPS.h>
#include <SD.h>
#include <SPI.h>

#define GPSlogFile logFile1

// Set GPSECHO to 'false' to turn off echoing the GPS data to the logFile console
// Set to 'true' if you want to debug and listen to the raw GPS sentences
#define GPSECHO false

// Connect to the GPS on the hardware port
Adafruit_GPS GPS(&GPSlogFile);

uint32_t timer = millis();

//SoftwarelogFile Xbee(Rx, Tx);                       //whatever the RX and TX is for the ballonduino, unsure currently
SSC ssc(0x28, 255);                                   //whatever pin powers the ssc sensor, also creation of SSC object in code
Adafruit_MCP9808 tempsensor = Adafruit_MCP9808();     //Creation of MCP9808 object
Adafruit_BNO055 bno = Adafruit_BNO055(55);            //55 is a place holder, whatever pin is actually the BNO is used here

void setup() {
  //XBEE.begin(9600);   setting baud rate for xbee, make sure it's the correct settings
  //XBEE_logFile.begin(9600);
  Serial.begin(115200);
  SPI.begin();
  pinMode(53,OUTPUT);  
  if (!SD.begin(53)) {
    Serial.println("SD Card NOT detected.");
  }
  else{
    Serial.println("SD Card detected!");
  }
  
  //should probably close this somehwere, but I'm not sure where
  logFile = SD.open("log.txt", FILE_WRITE);

  if (!tempsensor.begin()) {
    logFile.println("Couldn't find MCP9808!");
    
  }
  ssc.setMinRaw(0); //check data sheet for actual correct settings, just basic format here
  ssc.setMaxRaw(16383);
  ssc.setMinPressure(0.0);
  ssc.setMaxPressure(15);
  ssc.start();
  
  bno.setExtCrystalUse(true);

  // connect at 115200 so we can read the GPS fast enough and echo without dropping chars
  GPS.sendCommand(PMTK_SET_NMEA_OUTPUT_RMCONLY)
  GPS.sendCommand(PMTK_SET_NMEA_UPDATE_1HZ); // 1 Hz update rate
}

void loop() {
  ssc.update();
  float pressure = ssc.pressure();
  
  tempsensor.shutdown_wake(0);
  float c = tempsensor.readTempC();
  float f = (c*9.0/5.0)+32;
  
  imu::Vector<3> mag = bno.getVector(Adafruit_BNO055::VECTOR_MAGNETOMETER);  //magnetometier vectors in uT
  float magx = mag.x();
  float magy = mag.y();
  float magz = mag.z();
  
  char c = GPS.read();

  if (GPS.newNMEAreceived()) {
    // logFile.println(GPS.lastNMEA());       this also sets the newNMEAreceived() flag to false
    GPS.parse(GPS.lastNMEA())                 this also sets the newNMEAreceived() flag to false
  }
  
  if (timer > millis()) timer = millis();

  if (millis() - timer > 2000) {
    timer = millis(); // reset the timer
    logFile.print("\nTime: ");
    logFile.print(GPS.hour, DEC); logFile.print(':');
    logFile.print(GPS.minute, DEC); logFile.print(':');
    logFile.print(GPS.seconds, DEC); logFile.print('.');
    logFile.println(GPS.milliseconds);
    logFile.print("Date: ");
    logFile.print(GPS.day, DEC); logFile.print('/');
    logFile.print(GPS.month, DEC); logFile.print("/20");
    logFile.println(GPS.year, DEC);
    logFile.print("Fix: "); logFile.print((int)GPS.fix);
    logFile.print(" quality: "); logFile.println((int)GPS.fixquality);
    if (GPS.fix) {
      logFile.print("Location: ");
      logFile.print(GPS.latitude, 4); logFile.print(GPS.lat);
      logFile.print(", ");
      logFile.print(GPS.longitude, 4); logFile.println(GPS.lon);
      logFile.print("Speed (knots): "); logFile.println(GPS.speed);
      logFile.print("Angle: "); logFile.println(GPS.angle);
      logFile.print("Altitude: "); logFile.println(GPS.altitude);
      logFile.print("Satellites: "); logFile.println((int)GPS.satellites);
    }
   logFile.print("Pressure: ");
   logFile.println(pressure);
   logFile.print("Temperature in C: ")
   logFile.println(c);
   logFile.print("Temperature in f: ")
   logFile.println(f);
   logFile.print("Magnetometer X: ");
   logFile.println(magx);
   logFile.print("Magnetometer Y: ");
   logFile.println(magy);
   logFile.print("Magnetometer Z: ");
   logFile.println(magZ);
  }
}
